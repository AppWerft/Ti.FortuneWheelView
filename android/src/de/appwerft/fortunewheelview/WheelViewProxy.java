/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.fortunewheelview;

import java.io.IOException;
import java.util.Iterator;
import java.util.Map;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.io.TiFileFactory;
import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.util.TiUIHelper;
import org.appcelerator.titanium.view.TiUIView;
import org.appcelerator.titanium.view.TiDrawableReference;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.TiC;

import com.myriadmobile.fortune.FortuneView;
import com.myriadmobile.fortune.FortuneItem;
import com.myriadmobile.fortune.GrooveListener;

import android.app.Activity;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;

import java.util.HashMap;
import java.util.ArrayList;

import android.graphics.Bitmap;

@Kroll.proxy(creatableInModule = WheelViewModule.class)
public class WheelViewProxy extends TiViewProxy {
	// Standard Debugging variables
	public static final String LCAT = "WheelView";

	public TiUIWheelView mView;
	public String[] icons;
	public KrollDict attributes;
	FortuneView fortuneView;

	// Constructor
	public WheelViewProxy() {
		super();
		attributes = new KrollDict();
		attributes.put("centripetalPercent", .25f);
		attributes.put("distanceScale", 1f);
		attributes.put("flingable", true);
		attributes.put("frameRate", 40);
		attributes.put("friction", 5);

		attributes.put("grooves", true);
		attributes.put("minimumSize", .1f);
		attributes.put("notch", 90);
		attributes.put("spinSensitivity", 1f);
		attributes.put("selectScaleOffset", 1f);

		attributes.put("unselectScaleOffset", .8f);
		attributes.put("velocityClamp", 15);
	}

	@Override
	public TiUIView createView(Activity activity) {
		Log.d(LCAT, "createView inside ViewProxy ≠≠≠≠≠≠≠");
		mView = new TiUIWheelView(this);
		mView.getLayoutParams().autoFillsHeight = true;
		mView.getLayoutParams().autoFillsWidth = true;
		return mView;
	}

	@Kroll.method
	public int getSelectedIndex() {
		return fortuneView.getSelectedIndex();
	}

	@Kroll.method
	public void setSelectedItem(int ndx) {
		fortuneView.setSelectedItem(ndx);
	}

	@Kroll.method
	public int getTotalItems() {
		return fortuneView.getTotalItems();
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict args) {
		super.handleCreationDict(args);
		Log.d(LCAT, "handleCreationDict");
		if (args.containsKey(TiC.PROPERTY_IMAGES)) {
			icons = args.getStringArray(TiC.PROPERTY_IMAGES);
			Log.d(LCAT, icons.toString());
		}
		if (args.containsKey("wheelOptions")) {
			KrollDict options = args.getKrollDict("wheelOptions");
			for (Map.Entry<String, Object> entry : options.entrySet()) {
				attributes.put(entry.getKey(), entry.getValue());
			}
		}
	}

	private class TiUIWheelView extends TiUIView {
		private final class OnGrooveHandler implements GrooveListener {
			private final TiViewProxy proxy;

			private OnGrooveHandler(TiViewProxy proxy) {
				this.proxy = proxy;
			}

			@Override
			public void onGrooveChange(int index) {
				if (proxy.hasListeners("changed")) {
					KrollDict payload = new KrollDict();
					payload.put("index", index);
					proxy.fireEvent("changed", payload);
				} else {
					Log.e(LCAT, "cannot fireEvent 'ready' ");
				}
			}

			@Override
			public void onGrooveClicked(int index) {
				if (proxy.hasListeners("clicked")) {
					Log.d(LCAT, "onGrooveClicked");
					KrollDict payload = new KrollDict();
					payload.put("index", index);
					proxy.fireEvent("clicked", payload);
				} else {
				}

			}
		}

		TiUIWheelView(final TiViewProxy proxy) {
			super(proxy);
			LayoutParams lp = new LayoutParams(LayoutParams.WRAP_CONTENT,
					LayoutParams.WRAP_CONTENT);
			LinearLayout container = new LinearLayout(proxy.getActivity());
			container.setLayoutParams(lp);
			// attributes are visible
			fortuneView = new FortuneView(proxy.getActivity());
			fortuneView.setOptions(attributes);
			fortuneView.initSwipeControler();
			// adding of content into view:
			ArrayList<FortuneItem> list = new ArrayList<FortuneItem>();
			for (int i = 0; i < icons.length; i++) {
				list.add(new FortuneItem(getBitmapFromImage(icons[i])));
			}
			fortuneView.addFortuneItems(list);
			container.addView(fortuneView);
			// initiating listener(s)
			GrooveListener grooveListener = new OnGrooveHandler(proxy);
			fortuneView.setGrooveListener(grooveListener);
			setNativeView(container);
		}

		@Override
		public void processProperties(KrollDict d) {
			super.processProperties(d);
		}

		// loading of images from Ti.Blob or from Ressources folder
		private Bitmap getBitmapFromImage(Object val) {
			if (val instanceof TiBlob) {
				Log.d(LCAT, "image is blob");
				// in this case we can directly import:
				TiDrawableReference ref = TiDrawableReference.fromBlob(
						proxy.getActivity(), (TiBlob) val);
				return ref.getBitmap();
			} else if (val instanceof String) {
				Log.d(LCAT, "image is String " + (String) val);
				return loadImageFromApplication((String) val);
			} else {
				Log.e(LCAT, "images must be blobs or path");
				return null;
			}
		}

		private Bitmap loadImageFromApplication(String imageName) {
			Bitmap bitmap = null;
			String url = null;
			try {
				url = resolveUrl(null, imageName);
				TiBaseFile file = TiFileFactory.createTitaniumFile(
						new String[] { url }, false);
				Log.d(LCAT, file.nativePath());
				bitmap = TiUIHelper.createBitmap(file.getInputStream());
				Log.d(LCAT, "bytes=" + bitmap.getByteCount());
			} catch (IOException e) {
				Log.e(LCAT, " WheelView only supports local image files " + url);
			}
			return bitmap;
		}
	}

}